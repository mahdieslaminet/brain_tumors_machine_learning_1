clc
clear
close all

%% Laod Data

load('MRIdata.mat');

imageSize = [224 224];
N_data = numel(label);

for i = 1:N_data;
    img = Data(:,:,:,i);
    img2(:,:,1) = imresize(img,imageSize);
    img2(:,:,2) = imresize(img,imageSize);
    img2(:,:,3) = imresize(img,imageSize);
    data1(:,:,:,i)=img2;
end

clear Data

%% Shuffling Data
N_data = size(data1,4);

ind_tr = round(0.75*N_data);

idx = randperm(N_data);

X = data1(:,:,:,idx);
T = label(idx);

%% Train ans Test Data Sepratation
X_Tr = X(:,:,:,1:ind_tr);
X_Ts = X(:,:,:,1+ind_tr:end);

T_Tr = T(1:ind_tr);
T_Ts = T(1+ind_tr:end);

clear data1;

%% Googlenet 
net = googlenet;

%% Googlenet feature extractor
layer = 'pool5-7x7_s1';

for i = 1:N_data
    features(i,:) = activations(net,X(:,:,:,i),layer,'OutputAs','rows');
end

%% Train KNN
KNN_classifier = fitcknn(features(1:ind_tr,:),T(1:ind_tr),'Standardize',true,...
                    'NumNeighbors',3,'Distance','euclidean');

Y_Tr_KNN = predict(KNN_classifier,features(1:ind_tr,:));
Y_Ts_KNN = predict(KNN_classifier,features(1+ind_tr:end,:));

acc_tr = sum(Y_Tr_KNN == T_Tr')./numel(T_Tr)*100;
acc_ts = sum(Y_Ts_KNN == T_Ts')./numel(T_Ts)*100;

KNN = [acc_tr acc_ts]';

%% Train SVM
template = templateSVM('Standardize',true,'KernelFunction','polynomial');
SVM_classifier = fitcecoc(features(1:ind_tr,:),T(1:ind_tr),'Learners',template);

Y_Tr_SVM = predict(SVM_classifier,features(1:ind_tr,:));
Y_Ts_SVM = predict(SVM_classifier,features(1+ind_tr:end,:));

acc_tr = sum(Y_Tr_SVM == T_Tr')./numel(T_Tr)*100;
acc_ts = sum(Y_Ts_SVM == T_Ts')./numel(T_Ts)*100;

SVM = [acc_tr acc_ts]';

%% Train Softmax

NumFeatures = size(features,2);

layers = [
    featureInputLayer(NumFeatures)
    
    fullyConnectedLayer(50)
    dropoutLayer(0.05)
    
    fullyConnectedLayer(3)
    softmaxLayer
    classificationLayer];

options = trainingOptions('adam', ...
    'MaxEpochs',20,...
    'LearnRateSchedule','piecewise', ...
    'InitialLearnRate',1e-4, ...
    'LearnRateDropFactor', 0.75, ...
    'LearnRateDropPeriod', 4, ...
    'Verbose',false, ...
    'Plots','training-progress');

Net = trainNetwork(features(1:ind_tr,:),T(1:ind_tr),layers,options);

Y_Tr_SFT = classify(Net,features(1:ind_tr,:));
Y_Ts_SFT = classify(Net,features(1+ind_tr:end,:));
Y = classify(Net,features);

acc_tr = sum(Y_Tr_SFT == T_Tr')./numel(T_Tr)*100;
acc_ts = sum(Y_Ts_SFT == T_Ts')./numel(T_Ts)*100;

Softmax = [acc_tr acc_ts]';

Result = table(KNN, SVM, Softmax,'RowNames',{'Train','Test'})
save('./Result/GoogleNet/Result.mat','Result')

Result = [KNN, SVM, Softmax]';
x = categorical({'KNN','SVM','Softmax'});
x = reordercats(x,{'KNN','SVM','Softmax'});
bar(x,Result)
ylim([0 110])
grid minor
savefig('./Result/GoogleNet/BarPlot.fig')

plotconfusion(T_Tr',Y_Tr_KNN,'KNN Train',T_Tr',Y_Tr_SVM,'SVM Train',T_Tr',Y_Tr_SFT,'SoftMax Train',...
              T_Ts',Y_Ts_KNN,'KNN Test',T_Ts',Y_Ts_SVM,'SVM Test',T_Ts',Y_Ts_SFT,'SoftMax Test')GoogleNet, also known as Inception, is a deep convolutional neural network architecture designed for image classification and object detection tasks. While it is not specifically tailored for medical imaging, it can be adapted for use in the diagnosis of brain tumors through a process known as transfer learning.

Transfer learning involves taking a pre-trained neural network, like GoogleNet, which has learned features from a large dataset for general image classification, and fine-tuning it on a smaller dataset related to a specific taskâ€”in this case, brain tumor detection. The advantages of transfer learning include the ability to leverage the knowledge gained from vast datasets and accelerate training on a smaller, task-specific dataset.

In the context of brain tumor diagnosis, GoogleNet can be used as a feature extractor to capture meaningful patterns and features from medical images, such as MRI scans. The network learns to recognize important characteristics that distinguish between healthy brain tissue and areas affected by tumors.

The function of GoogleNet in this context involves:

Feature Extraction: GoogleNet excels at capturing hierarchical and abstract features from images through its inception modules. These features may include shapes, textures, and patterns that are indicative of abnormalities like tumors.

Pattern Recognition: The trained GoogleNet can identify complex patterns in medical images, aiding in the detection of abnormal regions within the brain.

Classification: Through transfer learning, the network can be fine-tuned to classify image patches or segments as either tumor or non-tumor regions. This classification can provide valuable information to radiologists and healthcare professionals.

Localization: GoogleNet can also assist in localizing the precise location of tumors within the brain, which is crucial for treatment planning.

It's important to note that while GoogleNet can contribute to the diagnosis of brain tumors, medical imaging tasks often require specialized architectures designed for segmentation. Segmentation networks, such as U-Net or variations of it, are better suited for outlining and precisely delineating the boundaries of tumors in medical images.

In summary, GoogleNet can play a role in the diagnosis of brain tumors by leveraging its capabilities in feature extraction, pattern recognition, and classification when adapted through transfer learning on relevant medical imaging datasets.
savefig('./Result/GoogleNet/ConfusionMatrix.fig')




